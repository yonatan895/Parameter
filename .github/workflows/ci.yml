name: CI

on:
  pull_request:
    branches: ["*"]

permissions:
  contents: read
  packages: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.mod', 'backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Go dependencies
        working-directory: ./backend
        run: go mod download

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6

      - name: Run golangci-lint
        working-directory: ./backend
        run: golangci-lint run ./...

  backend-test:
    runs-on: ubuntu-latest
    needs: backend-lint
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.mod', 'backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Go dependencies
        working-directory: ./backend
        run: go mod download

      - name: Run Go tests with coverage
        working-directory: ./backend
        run: go test -coverprofile=coverage.out ./...

      - name: Upload test coverage
        uses: actions/upload-artifact@v4.6.2
        with:
          name: backend-coverage
          path: ./backend/coverage.out




  build-backend:
    runs-on: ubuntu-latest
    needs: backend-test
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
  
      - name: Cache Docker Buildx layers
        uses: actions/cache@v3
        with:
          path: ~/.cache/buildx
          key: ${{ runner.os }}-buildx-backend-${{ hashFiles('backend/Dockerfile', 'backend/go.mod', 'backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-buildx-backend-
  
      - name: Authenticate Docker with GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  
      - name: Build backend Docker image
        run: |
          REPO_NAME=$(echo "ghcr.io/yonatan895/Parameter" | tr '[:upper:]' '[:lower:]')
          docker build -t backend:${{ github.sha }} ./backend  # Build the image
          docker tag backend:${{ github.sha }} $REPO_NAME/backend:${{ github.sha }}
          docker push $REPO_NAME/backend:${{ github.sha }}
        env:
          DOCKER_BUILDKIT: 1
        
  build-frontend:
    runs-on: ubuntu-latest
    needs: backend-test
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Cache NPM modules and node_modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            frontend/node_modules
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend assets
        working-directory: ./frontend
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker Buildx layers
        uses: actions/cache@v3
        with:
          path: ~/.cache/buildx
          key: ${{ runner.os }}-buildx-frontend-${{ hashFiles('frontend/Dockerfile', 'frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-buildx-frontend-

      - name: Build frontend Docker image
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin  
          REPO_NAME=$(echo "ghcr.io/yonatan895/Parameter" | tr '[:upper:]' '[:lower:]')
          docker build -t frontend:${{ github.sha }} ./frontend  # Build the image
          docker tag frontend:${{ github.sha }} $REPO_NAME/frontend:${{ github.sha }}
          docker push $REPO_NAME/frontend:${{ github.sha }}
        env:
          DOCKER_BUILDKIT: 1

# Optionally, add a job to notify Argo CD to refresh/sync after image push
# This requires Argo CD CLI and access to your cluster
# sync-argocd:
#   runs-on: ubuntu-latest
#   needs: [build-backend, build-frontend]
#   steps:
#     - name: Sync Argo CD app
#       run: |
#         argocd app sync twitter-clone --grpc-web --auth-token $ARGOCD_AUTH_TOKEN --server $ARGOCD_SERVER
#       env:
#         ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
#         ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
