name: CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.20"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Go dependencies
        working-directory: ./backend
        run: go mod download

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6
      - name: Run golangci-lint
        working-directory: ./backend
        run: golangci-lint run ./...

      - name: Run Go tests with coverage
        working-directory: ./backend
        run: |
          go test -coverprofile=coverage.out ./...
      - name: Upload test coverage
        uses: actions/upload-artifact@v4.6.2
        with:
          name: backend-coverage
          path: ./backend/coverage.out

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker Buildx layers
        uses: actions/cache@v3
        with:
          path: ~/.cache/buildx
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build backend builder image (tests stage)
        run: |
          docker buildx build \
            --target build \
            --tag backend-builder:${{ github.sha }} \
            --load ./backend \
            --cache-from type=local,src=~/.cache/buildx \
            --cache-to type=local,dest=~/.cache/buildx
        env:
          DOCKER_BUILDKIT: 1

      - name: Run backend tests in container
        run: docker run --rm backend-builder:${{ github.sha }} go test ./...
        env:
          DOCKER_BUILDKIT: 1

      - name: Build final backend Docker image
        run: |
          docker buildx build \
            --tag backend:ci-${{ github.sha }} \
            --load ./backend \
            --cache-from type=local,src=~/.cache/buildx \
            --cache-to type=local,dest=~/.cache/buildx
        env:
          DOCKER_BUILDKIT: 1

  frontend:
    runs-on: ubuntu-latest
    needs: backend
    strategy:
      matrix:
        node-version: ["18"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache NPM modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint


      - name: Build frontend assets
        working-directory: ./frontend
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker Buildx layers
        uses: actions/cache@v3
        with:
          path: ~/.cache/buildx
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build frontend Docker image
        run: |
          docker buildx build \
            --tag frontend:ci-${{ github.sha }} \
            --load ./frontend \
            --cache-from type=local,src=~/.cache/buildx \
            --cache-to type=local,dest=~/.cache/buildx
        env:
          DOCKER_BUILDKIT: 1
